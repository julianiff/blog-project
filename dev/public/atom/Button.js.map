{"version":3,"file":"Button.js","sourceRoot":"","sources":["../../../src/atom/Button.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,QAAQ,CAAC;AAChB,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAE1D,OAAO,EAAC,qBAAqB,EAAC,MAAM,8CAA8C,CAAC;AAEnF;;;;GAIG;AAEH,IAAa,MAAM,GAAnB,MAAa,MAAO,SAAQ,UAAU;IAAtC;;QAsCE;;WAEG;QAEI,iBAAY,GAAW,SAAS,CAAC;QAGxC;;WAEG;QAEI,aAAQ,GAAY,KAAK,CAAC;IA6BnC,CAAC;IA3BC,MAAM;QACJ,OAAO,IAAI,CAAC,IAAI;YACd,CAAC,CAAC,IAAI,CAAA;2BACe,IAAI,CAAC,IAAI;;uBAEb,GAAG,EAAE;gBACZ,IAAI,IAAI,CAAC,KAAK,EAAE;oBACd,MAAM,KAAK,GAAG,IAAI,qBAAqB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACpD,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;iBAC3B;YACH,CAAC;;;;;SAKN;YACH,CAAC,CAAC,IAAI,CAAA;mBACO,GAAG,EAAE;gBACZ,IAAI,IAAI,CAAC,KAAK,EAAE;oBACd,MAAM,KAAK,GAAG,IAAI,qBAAqB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACpD,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;iBAC3B;YACH,CAAC;;;kBAGO,CAAC;IACjB,CAAC;CACF,CAAA;AA7EQ,aAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BlB,CAAC;AAMF;IADC,QAAQ,CAAC,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;qCACE;AAM5B;IADC,QAAQ,CAAC,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;4CACc;AAExC;IADC,QAAQ,CAAC,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;oCACL;AAKrB;IADC,QAAQ,CAAC,EAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAC,CAAC;wCACR;AAjDtB,MAAM;IADlB,aAAa,CAAC,YAAY,CAAC;GACf,MAAM,CA8ElB;SA9EY,MAAM","sourcesContent":["import './Link';\nimport {LitElement, html, css} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\nimport {viewVariants} from '../controller/ressources/views';\nimport {LitCoilConnectedEvent} from '../controller/UpdateControllerConnectedEvent';\n\n/**\n * Text Styling Component\n *\n * @slot - Slot of the element for the text\n */\n@customElement('iff-button')\nexport class Button extends LitElement {\n  static styles = css`\n    :host([disabled]) {\n      --iff-button__background-color: var(--iff-alias__body--background-color);\n    }\n\n    button {\n      border: none;\n      background-color: var(\n        --iff-button__background-color,\n        var(--iff-alias__background-color--primary)\n      );\n      --iff-state__font--color: var(--iff-alias__background-color--secondary);\n      box-shadow: inset 0 0 0 2px var(--iff-alias__background-color--secondary);\n      border-radius: 3px;\n      cursor: pointer;\n      padding: var(--iff-card__padding--top-bottom, 0.5rem)\n        var(--var-card__padding--left-right, 2rem);\n      border-radius: 5px;\n      transition: all 150ms ease-in;\n    }\n\n    :slotted(*) {\n      --iff-state__font--color: var(--iff-alias__background-color--secondary);\n    }\n\n    button:hover {\n      box-shadow: inset 0 0 0 4px var(--iff-alias__background-color--secondary);\n      transition: all 150ms ease-in;\n    }\n  `;\n\n  /**\n   * Type of styling\n   */\n  @property({reflect: true})\n  public event?: viewVariants;\n\n  /**\n   * Event Payload\n   */\n  @property({reflect: true})\n  public eventPayload: string = 'payload';\n  @property({reflect: true})\n  public href?: string;\n  /**\n   * Type of styling\n   */\n  @property({reflect: true, type: Boolean})\n  public disabled: boolean = false;\n\n  render() {\n    return this.href\n      ? html`\n          <iff-link href=${this.href}>\n            <button\n              @click=${() => {\n                if (this.event) {\n                  const event = new LitCoilConnectedEvent(this.event);\n                  this.dispatchEvent(event);\n                }\n              }}\n            >\n              <slot></slot>\n            </button>\n          </iff-link>\n        `\n      : html`<button\n          @click=${() => {\n            if (this.event) {\n              const event = new LitCoilConnectedEvent(this.event);\n              this.dispatchEvent(event);\n            }\n          }}\n        >\n          <slot></slot>\n        </button>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'iff-button': Button;\n  }\n}\n"]}